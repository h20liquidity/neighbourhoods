{
  "abi": [
    {
      "inputs": [],
      "name": "authoringMetaHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "metaHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "authoringMeta",
          "type": "bytes"
        }
      ],
      "name": "buildParseMeta",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "parseMetaBytes",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "parse",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "bytecode",
          "type": "bytes"
        },
        {
          "internalType": "uint256[]",
          "name": "constants",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "parseMeta",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "parseMetaBytes",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "authoringMetaHash()": "b6c7175a",
    "buildParseMeta(bytes)": "a600bd0a",
    "parse(bytes)": "fab4087a",
    "parseMeta()": "ffc25704"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"authoringMetaHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"metaHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"authoringMeta\",\"type\":\"bytes\"}],\"name\":\"buildParseMeta\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"parseMetaBytes\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"parse\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"bytecode\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"constants\",\"type\":\"uint256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parseMeta\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"parseMetaBytes\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"authoringMetaHash()\":{\"returns\":{\"metaHash\":\"The authoring meta hash.\"}},\"buildParseMeta(bytes)\":{\"params\":{\"authoringMeta\":\"The authoring meta bytes.\"},\"returns\":{\"parseMetaBytes\":\"The built parse meta bytes.\"}},\"parse(bytes)\":{\"params\":{\"data\":\"The Rainlang bytes to parse.\"},\"returns\":{\"bytecode\":\"The expressions that can be evaluated.\",\"constants\":\"The constants that can be referenced by sources.\"}},\"parseMeta()\":{\"returns\":{\"parseMetaBytes\":\"The parse meta bytes.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"authoringMetaHash()\":{\"notice\":\"Returns the bytes of the authoring meta hash. Authoring meta is the data used by the authoring tool to give authors a better experience when writing Rainlang strings. The authoring meta is also used to generate the parse meta. As the authoring meta can be quite large, including potentially hundreds of long string descriptions of individual words, only the hash is required to be reported by the parser. This hash MUST NOT be modified after deployment. There MUST be a one-to-one mapping between authoring meta and parse meta that can be verified externally in a deterministic way.\"},\"buildParseMeta(bytes)\":{\"notice\":\"Builds the parse meta from authoring meta. MUST be deterministic and MUST NOT have side effects. The only input is the authoring meta. The hash of the provided authoring meta MUST match the authoring meta hash returned by `authoringMetaHash` and MUST determine the parse meta returned by `parseMeta`. Implementations are free to define their own data structures for authoring meta, which is why this function takes `bytes`. This function is likely very gas intensive, so it is STRONGLY RECOMMENDED to use a tool to generate the authoring meta offchain then call this and cross reference it against the return value of `parseMeta`, but then always use `parseMeta` directly onchain.\"},\"parse(bytes)\":{\"notice\":\"Parses a Rainlang string into an evaluable expression. MUST be deterministic and MUST NOT have side effects. The only inputs are the Rainlang string and the parse meta. MAY revert if the Rainlang string is invalid. This function takes `bytes` instead of `string` to allow for definitions of \\\"string\\\" other than UTF-8.\"},\"parseMeta()\":{\"notice\":\"Returns the bytes of the parse meta. Parse meta is the data used by the parser to convert a Rainlang string into an evaluable expression. These bytes MUST NOT be modified after deployment. The function is marked `external` so that it can be externally verified against the authoring meta, but is likely to be `public` in practice so that it can also be used internally by `parse`. The bytes returned MUST be identical to the bytes returned by `buildParseMeta` when provided with the correct authoring meta as defined by `authoringMetaHash`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/rain.interpreter/src/interface/unstable/IParserV1.sol\":\"IParserV1\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"appendCBOR\":false,\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[\":@prb/test/=lib/rain.interpreter/lib/prb-math/lib/prb-test/src/\",\":bytecode/=lib/rain.interpreter/src/lib/bytecode/\",\":caller/=lib/rain.interpreter/src/lib/caller/\",\":compile/=lib/rain.interpreter/src/lib/compile/\",\":ds-test/=lib/rain.interpreter/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/rain.interpreter/lib/openzeppelin-contracts/lib/erc4626-tests/\",\":eval/=lib/rain.interpreter/src/lib/eval/\",\":extern/=lib/rain.interpreter/src/lib/extern/\",\":forge-std/=lib/rain.interpreter/lib/forge-std/src/\",\":integrity/=lib/rain.interpreter/src/lib/integrity/\",\":ns/=lib/rain.interpreter/src/lib/ns/\",\":op/=lib/rain.interpreter/src/lib/op/\",\":openzeppelin-contracts/=lib/rain.interpreter/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/rain.interpreter/lib/openzeppelin-contracts/contracts/\",\":parse/=lib/rain.interpreter/src/lib/parse/\",\":prb-math/=lib/rain.interpreter/lib/prb-math/src/\",\":prb-test/=lib/rain.interpreter/lib/prb-math/lib/prb-test/src/\",\":rain.chainlink/=lib/rain.interpreter/lib/rain.chainlink/src/\",\":rain.datacontract/=lib/rain.interpreter/lib/rain.datacontract/src/\",\":rain.erc1820/=lib/rain.interpreter/lib/rain.erc1820/src/\",\":rain.interpreter/=lib/rain.interpreter/\",\":rain.lib.hash/=lib/rain.interpreter/lib/rain.lib.memkv/lib/rain.lib.hash/src/\",\":rain.lib.memkv/=lib/rain.interpreter/lib/rain.lib.memkv/src/\",\":rain.lib.typecast/=lib/rain.interpreter/lib/rain.lib.typecast/src/\",\":rain.math.fixedpoint/=lib/rain.interpreter/lib/rain.math.fixedpoint/src/\",\":rain.math.saturating/=lib/rain.interpreter/lib/rain.math.fixedpoint/lib/rain.math.saturating/src/\",\":rain.metadata/=lib/rain.interpreter/lib/rain.metadata/src/\",\":rain.solmem/=lib/rain.interpreter/lib/rain.solmem/src/\",\":sol.lib.binmaskflag/=lib/rain.interpreter/lib/sol.lib.binmaskflag/src/\",\":state/=lib/rain.interpreter/src/lib/state/\",\":uniswap/=lib/rain.interpreter/src/lib/uniswap/\",\":v2-core/=lib/rain.interpreter/lib/v2-core/contracts/\",\":v2-periphery/=lib/rain.interpreter/lib/v2-periphery/contracts/\"]},\"sources\":{\"lib/rain.interpreter/src/interface/IInterpreterStoreV1.sol\":{\"keccak256\":\"0xbd9baa8cd30406576f876a76f1c08396561ba93131741af338f63e2414e20619\",\"license\":\"CAL\",\"urls\":[\"bzz-raw://30bb6f09d8b8f27f77e6c44591c4f2070286a91dad202043cf2351ae802e3df5\",\"dweb:/ipfs/QmRz5pfzf5w84iNmKaYYbqP8oQywzc5xbd3xzKmxgFyf9y\"]},\"lib/rain.interpreter/src/interface/IInterpreterV1.sol\":{\"keccak256\":\"0xebde08ca2e1c25fc733e0bb8867598715f8ba79772f86db1c8960ad7d68a5293\",\"license\":\"CAL\",\"urls\":[\"bzz-raw://b93fb28a09aeea4afe7f0d4afc67354c0fa538e5a9b274b0c5f10ed1dd6b6b00\",\"dweb:/ipfs/QmatNhoHRSJ1ZvoCNo61YMt9jb1vvEkWy3mkcoPkB4FFA9\"]},\"lib/rain.interpreter/src/interface/unstable/IParserV1.sol\":{\"keccak256\":\"0x9714ffc0595336863f994cc661f00fdb6b162676beceb2a004782b4a72082ed4\",\"license\":\"CAL\",\"urls\":[\"bzz-raw://74fefdee4bcf63af1e4d9b5baef85abbb445d49e51b3f6604bb7f25bd6f45f72\",\"dweb:/ipfs/QmUJvW9YFZeZtJiG4ujdh6mBjVpTMpGA8GrSP47quawEAF\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.19+commit.7dd6d404"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "stateMutability": "pure",
          "type": "function",
          "name": "authoringMetaHash",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "metaHash",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "authoringMeta",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "buildParseMeta",
          "outputs": [
            {
              "internalType": "bytes",
              "name": "parseMetaBytes",
              "type": "bytes"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "parse",
          "outputs": [
            {
              "internalType": "bytes",
              "name": "bytecode",
              "type": "bytes"
            },
            {
              "internalType": "uint256[]",
              "name": "constants",
              "type": "uint256[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "pure",
          "type": "function",
          "name": "parseMeta",
          "outputs": [
            {
              "internalType": "bytes",
              "name": "parseMetaBytes",
              "type": "bytes"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "authoringMetaHash()": {
            "returns": {
              "metaHash": "The authoring meta hash."
            }
          },
          "buildParseMeta(bytes)": {
            "params": {
              "authoringMeta": "The authoring meta bytes."
            },
            "returns": {
              "parseMetaBytes": "The built parse meta bytes."
            }
          },
          "parse(bytes)": {
            "params": {
              "data": "The Rainlang bytes to parse."
            },
            "returns": {
              "bytecode": "The expressions that can be evaluated.",
              "constants": "The constants that can be referenced by sources."
            }
          },
          "parseMeta()": {
            "returns": {
              "parseMetaBytes": "The parse meta bytes."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "authoringMetaHash()": {
            "notice": "Returns the bytes of the authoring meta hash. Authoring meta is the data used by the authoring tool to give authors a better experience when writing Rainlang strings. The authoring meta is also used to generate the parse meta. As the authoring meta can be quite large, including potentially hundreds of long string descriptions of individual words, only the hash is required to be reported by the parser. This hash MUST NOT be modified after deployment. There MUST be a one-to-one mapping between authoring meta and parse meta that can be verified externally in a deterministic way."
          },
          "buildParseMeta(bytes)": {
            "notice": "Builds the parse meta from authoring meta. MUST be deterministic and MUST NOT have side effects. The only input is the authoring meta. The hash of the provided authoring meta MUST match the authoring meta hash returned by `authoringMetaHash` and MUST determine the parse meta returned by `parseMeta`. Implementations are free to define their own data structures for authoring meta, which is why this function takes `bytes`. This function is likely very gas intensive, so it is STRONGLY RECOMMENDED to use a tool to generate the authoring meta offchain then call this and cross reference it against the return value of `parseMeta`, but then always use `parseMeta` directly onchain."
          },
          "parse(bytes)": {
            "notice": "Parses a Rainlang string into an evaluable expression. MUST be deterministic and MUST NOT have side effects. The only inputs are the Rainlang string and the parse meta. MAY revert if the Rainlang string is invalid. This function takes `bytes` instead of `string` to allow for definitions of \"string\" other than UTF-8."
          },
          "parseMeta()": {
            "notice": "Returns the bytes of the parse meta. Parse meta is the data used by the parser to convert a Rainlang string into an evaluable expression. These bytes MUST NOT be modified after deployment. The function is marked `external` so that it can be externally verified against the authoring meta, but is likely to be `public` in practice so that it can also be used internally by `parse`. The bytes returned MUST be identical to the bytes returned by `buildParseMeta` when provided with the correct authoring meta as defined by `authoringMetaHash`."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@prb/test/=lib/rain.interpreter/lib/prb-math/lib/prb-test/src/",
        "bytecode/=lib/rain.interpreter/src/lib/bytecode/",
        "caller/=lib/rain.interpreter/src/lib/caller/",
        "compile/=lib/rain.interpreter/src/lib/compile/",
        "ds-test/=lib/rain.interpreter/lib/forge-std/lib/ds-test/src/",
        "erc4626-tests/=lib/rain.interpreter/lib/openzeppelin-contracts/lib/erc4626-tests/",
        "eval/=lib/rain.interpreter/src/lib/eval/",
        "extern/=lib/rain.interpreter/src/lib/extern/",
        "forge-std/=lib/rain.interpreter/lib/forge-std/src/",
        "integrity/=lib/rain.interpreter/src/lib/integrity/",
        "ns/=lib/rain.interpreter/src/lib/ns/",
        "op/=lib/rain.interpreter/src/lib/op/",
        "openzeppelin-contracts/=lib/rain.interpreter/lib/openzeppelin-contracts/",
        "openzeppelin/=lib/rain.interpreter/lib/openzeppelin-contracts/contracts/",
        "parse/=lib/rain.interpreter/src/lib/parse/",
        "prb-math/=lib/rain.interpreter/lib/prb-math/src/",
        "prb-test/=lib/rain.interpreter/lib/prb-math/lib/prb-test/src/",
        "rain.chainlink/=lib/rain.interpreter/lib/rain.chainlink/src/",
        "rain.datacontract/=lib/rain.interpreter/lib/rain.datacontract/src/",
        "rain.erc1820/=lib/rain.interpreter/lib/rain.erc1820/src/",
        "rain.interpreter/=lib/rain.interpreter/",
        "rain.lib.hash/=lib/rain.interpreter/lib/rain.lib.memkv/lib/rain.lib.hash/src/",
        "rain.lib.memkv/=lib/rain.interpreter/lib/rain.lib.memkv/src/",
        "rain.lib.typecast/=lib/rain.interpreter/lib/rain.lib.typecast/src/",
        "rain.math.fixedpoint/=lib/rain.interpreter/lib/rain.math.fixedpoint/src/",
        "rain.math.saturating/=lib/rain.interpreter/lib/rain.math.fixedpoint/lib/rain.math.saturating/src/",
        "rain.metadata/=lib/rain.interpreter/lib/rain.metadata/src/",
        "rain.solmem/=lib/rain.interpreter/lib/rain.solmem/src/",
        "sol.lib.binmaskflag/=lib/rain.interpreter/lib/sol.lib.binmaskflag/src/",
        "state/=lib/rain.interpreter/src/lib/state/",
        "uniswap/=lib/rain.interpreter/src/lib/uniswap/",
        "v2-core/=lib/rain.interpreter/lib/v2-core/contracts/",
        "v2-periphery/=lib/rain.interpreter/lib/v2-periphery/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 1000000
      },
      "metadata": {
        "bytecodeHash": "none",
        "appendCBOR": false
      },
      "compilationTarget": {
        "lib/rain.interpreter/src/interface/unstable/IParserV1.sol": "IParserV1"
      },
      "libraries": {}
    },
    "sources": {
      "lib/rain.interpreter/src/interface/IInterpreterStoreV1.sol": {
        "keccak256": "0xbd9baa8cd30406576f876a76f1c08396561ba93131741af338f63e2414e20619",
        "urls": [
          "bzz-raw://30bb6f09d8b8f27f77e6c44591c4f2070286a91dad202043cf2351ae802e3df5",
          "dweb:/ipfs/QmRz5pfzf5w84iNmKaYYbqP8oQywzc5xbd3xzKmxgFyf9y"
        ],
        "license": "CAL"
      },
      "lib/rain.interpreter/src/interface/IInterpreterV1.sol": {
        "keccak256": "0xebde08ca2e1c25fc733e0bb8867598715f8ba79772f86db1c8960ad7d68a5293",
        "urls": [
          "bzz-raw://b93fb28a09aeea4afe7f0d4afc67354c0fa538e5a9b274b0c5f10ed1dd6b6b00",
          "dweb:/ipfs/QmatNhoHRSJ1ZvoCNo61YMt9jb1vvEkWy3mkcoPkB4FFA9"
        ],
        "license": "CAL"
      },
      "lib/rain.interpreter/src/interface/unstable/IParserV1.sol": {
        "keccak256": "0x9714ffc0595336863f994cc661f00fdb6b162676beceb2a004782b4a72082ed4",
        "urls": [
          "bzz-raw://74fefdee4bcf63af1e4d9b5baef85abbb445d49e51b3f6604bb7f25bd6f45f72",
          "dweb:/ipfs/QmUJvW9YFZeZtJiG4ujdh6mBjVpTMpGA8GrSP47quawEAF"
        ],
        "license": "CAL"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "lib/rain.interpreter/src/interface/unstable/IParserV1.sol",
    "id": 54891,
    "exportedSymbols": {
      "AuthoringMetaHashMismatch": [
        54858
      ],
      "DEFAULT_STATE_NAMESPACE": [
        54726
      ],
      "EncodedDispatch": [
        54714
      ],
      "FullyQualifiedNamespace": [
        54675
      ],
      "IInterpreterStoreV1": [
        54707
      ],
      "IInterpreterV1": [
        54757
      ],
      "IParserV1": [
        54890
      ],
      "NO_STORE": [
        54684
      ],
      "Operand": [
        54718
      ],
      "SourceIndex": [
        54712
      ],
      "StateNamespace": [
        54716
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:3436:77",
    "nodes": [
      {
        "id": 54850,
        "nodeType": "PragmaDirective",
        "src": "32:24:77",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".18"
        ]
      },
      {
        "id": 54851,
        "nodeType": "ImportDirective",
        "src": "58:31:77",
        "nodes": [],
        "absolutePath": "lib/rain.interpreter/src/interface/IInterpreterV1.sol",
        "file": "../IInterpreterV1.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 54891,
        "sourceUnit": 54758,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 54858,
        "nodeType": "ErrorDefinition",
        "src": "214:66:77",
        "nodes": [],
        "documentation": {
          "id": 54852,
          "nodeType": "StructuredDocumentation",
          "src": "91:123:77",
          "text": "@dev The `IParserV1` MUST revert if the authoring meta provided to a build\n does not match the authoring meta hash."
        },
        "errorSelector": "26cc0fec",
        "name": "AuthoringMetaHashMismatch",
        "nameLocation": "220:25:77",
        "parameters": {
          "id": 54857,
          "nodeType": "ParameterList",
          "parameters": [
            {
              "constant": false,
              "id": 54854,
              "mutability": "mutable",
              "name": "expected",
              "nameLocation": "254:8:77",
              "nodeType": "VariableDeclaration",
              "scope": 54858,
              "src": "246:16:77",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              },
              "typeName": {
                "id": 54853,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "246:7:77",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              },
              "visibility": "internal"
            },
            {
              "constant": false,
              "id": 54856,
              "mutability": "mutable",
              "name": "actual",
              "nameLocation": "272:6:77",
              "nodeType": "VariableDeclaration",
              "scope": 54858,
              "src": "264:14:77",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              },
              "typeName": {
                "id": 54855,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "264:7:77",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              },
              "visibility": "internal"
            }
          ],
          "src": "245:34:77"
        }
      },
      {
        "id": 54890,
        "nodeType": "ContractDefinition",
        "src": "282:3185:77",
        "nodes": [
          {
            "id": 54864,
            "nodeType": "FunctionDefinition",
            "src": "1013:70:77",
            "nodes": [],
            "documentation": {
              "id": 54859,
              "nodeType": "StructuredDocumentation",
              "src": "308:700:77",
              "text": "Returns the bytes of the authoring meta hash. Authoring meta is the data\n used by the authoring tool to give authors a better experience when\n writing Rainlang strings. The authoring meta is also used to generate the\n parse meta. As the authoring meta can be quite large, including\n potentially hundreds of long string descriptions of individual words,\n only the hash is required to be reported by the parser. This hash MUST\n NOT be modified after deployment. There MUST be a one-to-one mapping\n between authoring meta and parse meta that can be verified externally in\n a deterministic way.\n @return metaHash The authoring meta hash."
            },
            "functionSelector": "b6c7175a",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "authoringMetaHash",
            "nameLocation": "1022:17:77",
            "parameters": {
              "id": 54860,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1039:2:77"
            },
            "returnParameters": {
              "id": 54863,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 54862,
                  "mutability": "mutable",
                  "name": "metaHash",
                  "nameLocation": "1073:8:77",
                  "nodeType": "VariableDeclaration",
                  "scope": 54864,
                  "src": "1065:16:77",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 54861,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1065:7:77",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1064:18:77"
            },
            "scope": 54890,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 54872,
            "nodeType": "FunctionDefinition",
            "src": "1964:104:77",
            "nodes": [],
            "documentation": {
              "id": 54865,
              "nodeType": "StructuredDocumentation",
              "src": "1089:870:77",
              "text": "Builds the parse meta from authoring meta. MUST be deterministic and\n MUST NOT have side effects. The only input is the authoring meta.\n The hash of the provided authoring meta MUST match the authoring meta\n hash returned by `authoringMetaHash` and MUST determine the parse meta\n returned by `parseMeta`. Implementations are free to define their own\n data structures for authoring meta, which is why this function takes\n `bytes`. This function is likely very gas intensive, so it is STRONGLY\n RECOMMENDED to use a tool to generate the authoring meta offchain then\n call this and cross reference it against the return value of `parseMeta`,\n but then always use `parseMeta` directly onchain.\n @param authoringMeta The authoring meta bytes.\n @return parseMetaBytes The built parse meta bytes."
            },
            "functionSelector": "a600bd0a",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "buildParseMeta",
            "nameLocation": "1973:14:77",
            "parameters": {
              "id": 54868,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 54867,
                  "mutability": "mutable",
                  "name": "authoringMeta",
                  "nameLocation": "2001:13:77",
                  "nodeType": "VariableDeclaration",
                  "scope": 54872,
                  "src": "1988:26:77",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 54866,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1988:5:77",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1987:28:77"
            },
            "returnParameters": {
              "id": 54871,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 54870,
                  "mutability": "mutable",
                  "name": "parseMetaBytes",
                  "nameLocation": "2052:14:77",
                  "nodeType": "VariableDeclaration",
                  "scope": 54872,
                  "src": "2039:27:77",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 54869,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "2039:5:77",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2038:29:77"
            },
            "scope": 54890,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 54878,
            "nodeType": "FunctionDefinition",
            "src": "2732:73:77",
            "nodes": [],
            "documentation": {
              "id": 54873,
              "nodeType": "StructuredDocumentation",
              "src": "2074:653:77",
              "text": "Returns the bytes of the parse meta. Parse meta is the data used by the\n parser to convert a Rainlang string into an evaluable expression.\n These bytes MUST NOT be modified after deployment. The function is\n marked `external` so that it can be externally verified against the\n authoring meta, but is likely to be `public` in practice so that it can\n also be used internally by `parse`. The bytes returned MUST be identical\n to the bytes returned by `buildParseMeta` when provided with the correct\n authoring meta as defined by `authoringMetaHash`.\n @return parseMetaBytes The parse meta bytes."
            },
            "functionSelector": "ffc25704",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "parseMeta",
            "nameLocation": "2741:9:77",
            "parameters": {
              "id": 54874,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2750:2:77"
            },
            "returnParameters": {
              "id": 54877,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 54876,
                  "mutability": "mutable",
                  "name": "parseMetaBytes",
                  "nameLocation": "2789:14:77",
                  "nodeType": "VariableDeclaration",
                  "scope": 54878,
                  "src": "2776:27:77",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 54875,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "2776:5:77",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2775:29:77"
            },
            "scope": 54890,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 54889,
            "nodeType": "FunctionDefinition",
            "src": "3357:108:77",
            "nodes": [],
            "documentation": {
              "id": 54879,
              "nodeType": "StructuredDocumentation",
              "src": "2811:541:77",
              "text": "Parses a Rainlang string into an evaluable expression. MUST be\n deterministic and MUST NOT have side effects. The only inputs are the\n Rainlang string and the parse meta. MAY revert if the Rainlang string\n is invalid. This function takes `bytes` instead of `string` to allow\n for definitions of \"string\" other than UTF-8.\n @param data The Rainlang bytes to parse.\n @return bytecode The expressions that can be evaluated.\n @return constants The constants that can be referenced by sources."
            },
            "functionSelector": "fab4087a",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "parse",
            "nameLocation": "3366:5:77",
            "parameters": {
              "id": 54882,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 54881,
                  "mutability": "mutable",
                  "name": "data",
                  "nameLocation": "3385:4:77",
                  "nodeType": "VariableDeclaration",
                  "scope": 54889,
                  "src": "3372:17:77",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 54880,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "3372:5:77",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3371:19:77"
            },
            "returnParameters": {
              "id": 54888,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 54884,
                  "mutability": "mutable",
                  "name": "bytecode",
                  "nameLocation": "3427:8:77",
                  "nodeType": "VariableDeclaration",
                  "scope": 54889,
                  "src": "3414:21:77",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 54883,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "3414:5:77",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 54887,
                  "mutability": "mutable",
                  "name": "constants",
                  "nameLocation": "3454:9:77",
                  "nodeType": "VariableDeclaration",
                  "scope": 54889,
                  "src": "3437:26:77",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 54885,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "3437:7:77",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 54886,
                    "nodeType": "ArrayTypeName",
                    "src": "3437:9:77",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3413:51:77"
            },
            "scope": 54890,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "IParserV1",
        "contractDependencies": [],
        "contractKind": "interface",
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          54890
        ],
        "name": "IParserV1",
        "nameLocation": "292:9:77",
        "scope": 54891,
        "usedErrors": []
      }
    ],
    "license": "CAL"
  },
  "id": 77
}
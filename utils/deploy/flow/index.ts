import { getCloneFactory } from "../cloneFactory"
import config from "../../../config/config.json"
import { ethers } from "hardhat"
import { getEventArgs, getEvents } from "../../events"
import { getMetaFromTransaction } from "../basicDeploy"
import * as helpers  from "@nomicfoundation/hardhat-network-helpers"
import { getAbiFromMeta } from "../../meta/cbor"  
import * as dotenv from "dotenv";
import { resetFork } from "../../hardhat"
dotenv.config();

export const getFlowDeployedClone = async () => { 
    console.log("called") 
     

    const [deployer,you] = await ethers.getSigners()
    const cloneFactory = await getCloneFactory() 
    console.log("cloneFactory : " , cloneFactory.address) 

    const implementation = config.address.flowERC20.address  
    
    const flowAbi = getAbiFromMeta(await getMetaFromTransaction(config.address.flowERC20.deployTransaction))

    const encodedFlowConfig = "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000000000000000006546f6b656e4100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004544b4e41000000000000000000000000000000000000000000000000000000000000000000000000000000002279b7a0a67db372996a5fab50d91eaa73d2ebe6000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000004000d0005000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005fea74d0c9bf4a3c28f0dd0674db22a3d7f8bf259c56af19f4ac1e735b156974ff339171dab445c29f9897dda2f42413426ee907dc7f8b52bd387bc7cf9384c6b00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000033b2e3c9fd0803ce8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000b7f8bc63bbcad18155201308c8f3540b07f84f5e00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000028000d0001000d0001000d0001000d0001000d000300040000000d0009000d000300040000000d00070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005fea74d0c9bf4a3c28f0dd0674db22a3d7f8bf259c56af19f4ac1e735b156974ff339171dab445c29f9897dda2f42413426ee907dc7f8b52bd387bc7cf9384c6b00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000033b2e3c9fd0803ce80000000000000000000000000000000000000000000000000000000000000000000000"

    // await resetFork(config.hardhat.forkBaseUrl+process.env["ALCHEMY_KEY"], 33280557 )  
    
    const flowCloneTx = await cloneFactory.clone(
        implementation,
        encodedFlowConfig
    );      

    const flow = new ethers.Contract(
        ethers.utils.hexZeroPad(
          ethers.utils.hexStripZeros(
            (await getEventArgs(flowCloneTx, "NewClone", cloneFactory)).clone
          ),
          20 // address bytes length
        ),
        flowAbi,
        deployer
      ) ;
    
      await flow.deployed();  

      console.log("flow : " , flow.address)

    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    flow.deployTransaction = flowCloneTx;  

    // await resetFork(config.hardhat.forkBaseUrl+process.env["ALCHEMY_KEY"], 33280549 )   
    let evaluable_ = {
        interpreter: '0x8A791620dd6260079BF849Dc5567aDC3F2FdC318',
        store: '0x610178dA211FEF7D417bC0e6FeD39F05609AD788',
        expression: '0x8dAF17A20c9DBA35f005b6324F493785D239719d'
    }
    const flowStruct = await flow
      .connect(you)
      .callStatic.flow(, [1234], []);

    compareStructs(flowStruct, fillEmptyAddressERC20(flowERC20IO, me.address));

    const txFlow = await flow
      .connect(you)
      .flow(flowInitialized[0].evaluable, [1234], []); 

      console.log("success : " , await flow.balanceOf(you.address)) 



    // const flowInitialized = (await getEvents(
    //     flow.deployTransaction,
    //     "FlowInitialized",
    //     flow
    //   ))



    // await resetFork(config.hardhat.forkBaseUrl+process.env["ALCHEMY_KEY"], 33280549 )  


}